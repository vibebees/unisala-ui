/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  ": types.LoginDocument,
    "\n    mutation register(\n      $firstName: String\n      $lastName: String\n      $email: String\n      $password: String\n      $type: String\n      $spaceOrgName: String\n      $code: Float\n    ) {\n      register(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        type: $type\n        spaceOrgName: $spaceOrgName\n        code: $code\n      ) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  ": types.RegisterDocument,
    "\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  ": types.AddCommentDocument,
    "\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  ": types.AddEducationDocument,
    "\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  ": types.AddPostDocument,
    "\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  ": types.GetPostByIdDocument,
    "\n    mutation editPost($postId: String!, $postText: String!) {\n      editPost(postId: $postId, postText: $postText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  ": types.EditPostDocument,
    "\n    mutation deletePost($postId: String!) {\n      deletePost(postId: $postId) {\n        success\n        message\n      }\n    }\n  ": types.DeletePostDocument,
    "\n    mutation deleteComment($id: String!) {\n      deleteComment(id: $id) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  ": types.DeleteCommentDocument,
    "\n    mutation editAbout($about: String!) {\n      editAbout(about: $about) {\n        status {\n          success\n          message\n        }\n        about {\n          text\n          private\n        }\n      }\n    }\n  ": types.EditAboutDocument,
    "\n    mutation editEducation(\n      $id: String!\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      editEducation(\n        id: $id\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  ": types.EditEducationDocument,
    "\n    mutation editProfile(\n      $picture: String\n      $coverPicture: String\n      $username: String!\n      $firstName: String!\n      $lastName: String!\n      $location: String\n      $oneLinerBio: String\n      $birthday: String\n      $interestedSubjects: [ID]\n      $userStatus: String\n      $studyLevel: String\n      $interestedUni: [Int]\n    ) {\n      editProfile(\n        picture: $picture\n        coverPicture: $coverPicture\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        location: $location\n        oneLinerBio: $oneLinerBio\n        birthday: $birthday\n        interestedSubjects: $interestedSubjects\n        userStatus: $userStatus\n        studyLevel: $studyLevel\n        interestedUni: $interestedUni\n      ) {\n        status {\n          success\n          message\n        }\n        user {\n          firstName\n          lastName\n          username\n          oneLinerBio\n          location\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          blocked\n          banned\n          active\n          picture\n          doj\n        }\n      }\n    }\n  ": types.EditProfileDocument,
    "\n    query commentList($postId: String!, $parentId: String) {\n      commentList(postId: $postId, parentId: $parentId) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  ": types.CommentListDocument,
    "\n    mutation editComment($commentId: String!, $commentText: String!) {\n      editComment(commentId: $commentId, commentText: $commentText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  ": types.EditCommentDocument,
    "\n    query savedList($userId: String!, $page: Float) {\n      savedList(userId: $userId, page: $page, pageSize: 5) {\n        status {\n          success\n          message\n        }\n        Posts {\n          _id\n          postText\n          images\n          postImage\n          date\n          postCommentsCount\n          upVoted\n          upVoteCount\n          saved\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n        totalPosts\n      }\n    }\n  ": types.SavedListDocument,
    "\n    query getUser($username: String!) {\n      getUser(username: $username) {\n        connectionType {\n          requestorId\n          receiverId\n          status\n        }\n        user {\n          firstName\n          lastName\n          username\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          location\n          studyLevel\n          oneLinerBio\n          doj\n          blocked\n          banned\n          active\n          picture\n          coverPicture\n          _id\n          about {\n            text\n            private\n          }\n          badges {\n            private\n            earnedBadges {\n              title\n              description\n              date\n            }\n          }\n          education {\n            private\n            schools {\n              _id\n              school\n              degree\n              major\n              startDate\n              graduationDate\n            }\n          }\n          testScore {\n            private\n            scores {\n              SAT_SCORE {\n                english\n                maths\n              }\n              ACT_SCORE {\n                english\n                maths\n              }\n              IELTS_SCORE {\n                score\n              }\n              TOEFL_SCORE {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  ": types.GetUserDocument,
    "\n    query upVoteList($postId: String!, $page: Float) {\n      upVoteList(postId: $postId, page: $page) {\n        success\n        message\n        upVoters {\n          _id\n          firstName\n          lastName\n          picture\n        }\n      }\n    }\n  ": types.UpVoteListDocument,
    "\n    query receivedGuestbookList(\n      $userId: String!\n      $page: Float\n      $pageSize: Float\n    ) {\n      receivedGuestbookList(userId: $userId, page: $page, pageSize: $pageSize) {\n        status {\n          success\n          message\n        }\n        guestbook {\n          _id\n          date\n          message\n          user {\n            firstName\n            lastName\n            username\n            verified\n            picture\n          }\n        }\n      }\n    }\n  ": types.ReceivedGuestbookListDocument,
    "\n    mutation save($postId: String!) {\n      save(postId: $postId) {\n        success\n        message\n      }\n    }\n  ": types.SaveDocument,
    "\n    mutation unSave($postId: String!) {\n      unSave(postId: $postId) {\n        success\n        message\n      }\n    }\n  ": types.UnSaveDocument,
    "\n    mutation sendGuestbookMessage($receiverId: String!, $message: String!) {\n      sendGuestbookMessage(receiverId: $receiverId, message: $message) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  ": types.SendGuestbookMessageDocument,
    "\n    mutation toggleView($card: String!) {\n      toggleView(card: $card) {\n        status {\n          success\n          message\n        }\n        private\n      }\n    }\n  ": types.ToggleViewDocument,
    "\n    mutation upVote($postId: String!) {\n      upVote(postId: $postId) {\n        upVotesCount\n        success\n        message\n      }\n    }\n  ": types.UpVoteDocument,
    "\n    mutation deleteEducation($id: String!) {\n      deleteEducation(id: $id) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  ": types.DeleteEducationDocument,
    "\n    mutation sendConnectRequest($receiverId: String!) {\n      sendConnectRequest(receiverId: $receiverId) {\n        success\n        message\n      }\n    }\n  ": types.SendConnectRequestDocument,
    "\n    mutation removeConnectRequest($connecteeId: String!) {\n      removeConnectRequest(connecteeId: $connecteeId) {\n        success\n        message\n      }\n    }\n  ": types.RemoveConnectRequestDocument,
    "\n    query connectedList($userId: String!) {\n      connectedList(userId: $userId) {\n        status {\n          message\n          success\n        }\n        connectionList {\n          date\n          user {\n            firstName\n            lastName\n            username\n            _id\n            picture\n          }\n        }\n      }\n    }\n  ": types.ConnectedListDocument,
    "\n    mutation acceptConnectRequest($requestorId: String!) {\n      acceptConnectRequest(requestorId: $requestorId) {\n        success\n        message\n      }\n    }\n  ": types.AcceptConnectRequestDocument,
    "\n    query fetchFeedV2($feedQuery: FeedQueryInput) {\n      fetchFeedV2(feedQuery: $feedQuery) {\n        data {\n          section\n          postText\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          upVoted\n          upVoteCount\n          postCommentsCount\n          type\n          saved\n          videoURL\n          event {\n            _id\n            title\n            description\n            isRegistered\n            address\n            eventDate\n            interestedUsers {\n              userId\n            }\n            images\n          }\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          date\n          _id\n          images\n          user {\n            firstName\n            lastName\n            picture\n            username\n            _id\n          }\n          elevatorInfo {\n            tags\n            ownType\n            name\n            tags\n            majors {\n              title\n            }\n            pictures\n            address {\n              streetAddressOrPOBox\n              city\n              stateAbbreviation\n              zipCode\n            }\n            name\n          }\n          studentCharges {\n            combinedChargeForRoomAndBoard\n            undergraduateApplicationFee\n            graduateApplicationFee\n            unitId\n            undergraduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              onCampus {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusNotWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              booksAndSupplies\n            }\n\n            graduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n            }\n          }\n          suggestedOrgs {\n            name\n            type\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          suggestedSpace {\n            type\n            name\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          userEvaluation {\n            unitId\n            rankings {\n              rank\n              title\n              totalPlayers\n            }\n            report {\n              academics\n              average\n              value\n              diversity\n              campus\n              atheltics\n              partyScene\n              professors\n              location\n              dorms\n              campusFood\n              studentLife\n              safety\n            }\n            reviews {\n              rating\n              type\n              votes\n            }\n          }\n\n          unitId\n          applied_level\n          status\n          attempt\n          university\n          conversation\n          major\n        }\n      }\n    }\n  ": types.FetchFeedV2Document,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation register(\n      $firstName: String\n      $lastName: String\n      $email: String\n      $password: String\n      $type: String\n      $spaceOrgName: String\n      $code: Float\n    ) {\n      register(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        type: $type\n        spaceOrgName: $spaceOrgName\n        code: $code\n      ) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation register(\n      $firstName: String\n      $lastName: String\n      $email: String\n      $password: String\n      $type: String\n      $spaceOrgName: String\n      $code: Float\n    ) {\n      register(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        type: $type\n        spaceOrgName: $spaceOrgName\n        code: $code\n      ) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editPost($postId: String!, $postText: String!) {\n      editPost(postId: $postId, postText: $postText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation editPost($postId: String!, $postText: String!) {\n      editPost(postId: $postId, postText: $postText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePost($postId: String!) {\n      deletePost(postId: $postId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation deletePost($postId: String!) {\n      deletePost(postId: $postId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteComment($id: String!) {\n      deleteComment(id: $id) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation deleteComment($id: String!) {\n      deleteComment(id: $id) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editAbout($about: String!) {\n      editAbout(about: $about) {\n        status {\n          success\n          message\n        }\n        about {\n          text\n          private\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation editAbout($about: String!) {\n      editAbout(about: $about) {\n        status {\n          success\n          message\n        }\n        about {\n          text\n          private\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editEducation(\n      $id: String!\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      editEducation(\n        id: $id\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation editEducation(\n      $id: String!\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      editEducation(\n        id: $id\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editProfile(\n      $picture: String\n      $coverPicture: String\n      $username: String!\n      $firstName: String!\n      $lastName: String!\n      $location: String\n      $oneLinerBio: String\n      $birthday: String\n      $interestedSubjects: [ID]\n      $userStatus: String\n      $studyLevel: String\n      $interestedUni: [Int]\n    ) {\n      editProfile(\n        picture: $picture\n        coverPicture: $coverPicture\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        location: $location\n        oneLinerBio: $oneLinerBio\n        birthday: $birthday\n        interestedSubjects: $interestedSubjects\n        userStatus: $userStatus\n        studyLevel: $studyLevel\n        interestedUni: $interestedUni\n      ) {\n        status {\n          success\n          message\n        }\n        user {\n          firstName\n          lastName\n          username\n          oneLinerBio\n          location\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          blocked\n          banned\n          active\n          picture\n          doj\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation editProfile(\n      $picture: String\n      $coverPicture: String\n      $username: String!\n      $firstName: String!\n      $lastName: String!\n      $location: String\n      $oneLinerBio: String\n      $birthday: String\n      $interestedSubjects: [ID]\n      $userStatus: String\n      $studyLevel: String\n      $interestedUni: [Int]\n    ) {\n      editProfile(\n        picture: $picture\n        coverPicture: $coverPicture\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        location: $location\n        oneLinerBio: $oneLinerBio\n        birthday: $birthday\n        interestedSubjects: $interestedSubjects\n        userStatus: $userStatus\n        studyLevel: $studyLevel\n        interestedUni: $interestedUni\n      ) {\n        status {\n          success\n          message\n        }\n        user {\n          firstName\n          lastName\n          username\n          oneLinerBio\n          location\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          blocked\n          banned\n          active\n          picture\n          doj\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query commentList($postId: String!, $parentId: String) {\n      commentList(postId: $postId, parentId: $parentId) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query commentList($postId: String!, $parentId: String) {\n      commentList(postId: $postId, parentId: $parentId) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editComment($commentId: String!, $commentText: String!) {\n      editComment(commentId: $commentId, commentText: $commentText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation editComment($commentId: String!, $commentText: String!) {\n      editComment(commentId: $commentId, commentText: $commentText) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query savedList($userId: String!, $page: Float) {\n      savedList(userId: $userId, page: $page, pageSize: 5) {\n        status {\n          success\n          message\n        }\n        Posts {\n          _id\n          postText\n          images\n          postImage\n          date\n          postCommentsCount\n          upVoted\n          upVoteCount\n          saved\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n        totalPosts\n      }\n    }\n  "): (typeof documents)["\n    query savedList($userId: String!, $page: Float) {\n      savedList(userId: $userId, page: $page, pageSize: 5) {\n        status {\n          success\n          message\n        }\n        Posts {\n          _id\n          postText\n          images\n          postImage\n          date\n          postCommentsCount\n          upVoted\n          upVoteCount\n          saved\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n        totalPosts\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUser($username: String!) {\n      getUser(username: $username) {\n        connectionType {\n          requestorId\n          receiverId\n          status\n        }\n        user {\n          firstName\n          lastName\n          username\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          location\n          studyLevel\n          oneLinerBio\n          doj\n          blocked\n          banned\n          active\n          picture\n          coverPicture\n          _id\n          about {\n            text\n            private\n          }\n          badges {\n            private\n            earnedBadges {\n              title\n              description\n              date\n            }\n          }\n          education {\n            private\n            schools {\n              _id\n              school\n              degree\n              major\n              startDate\n              graduationDate\n            }\n          }\n          testScore {\n            private\n            scores {\n              SAT_SCORE {\n                english\n                maths\n              }\n              ACT_SCORE {\n                english\n                maths\n              }\n              IELTS_SCORE {\n                score\n              }\n              TOEFL_SCORE {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getUser($username: String!) {\n      getUser(username: $username) {\n        connectionType {\n          requestorId\n          receiverId\n          status\n        }\n        user {\n          firstName\n          lastName\n          username\n          age\n          gender\n          birthday\n          name\n          role\n          verified\n          location\n          studyLevel\n          oneLinerBio\n          doj\n          blocked\n          banned\n          active\n          picture\n          coverPicture\n          _id\n          about {\n            text\n            private\n          }\n          badges {\n            private\n            earnedBadges {\n              title\n              description\n              date\n            }\n          }\n          education {\n            private\n            schools {\n              _id\n              school\n              degree\n              major\n              startDate\n              graduationDate\n            }\n          }\n          testScore {\n            private\n            scores {\n              SAT_SCORE {\n                english\n                maths\n              }\n              ACT_SCORE {\n                english\n                maths\n              }\n              IELTS_SCORE {\n                score\n              }\n              TOEFL_SCORE {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query upVoteList($postId: String!, $page: Float) {\n      upVoteList(postId: $postId, page: $page) {\n        success\n        message\n        upVoters {\n          _id\n          firstName\n          lastName\n          picture\n        }\n      }\n    }\n  "): (typeof documents)["\n    query upVoteList($postId: String!, $page: Float) {\n      upVoteList(postId: $postId, page: $page) {\n        success\n        message\n        upVoters {\n          _id\n          firstName\n          lastName\n          picture\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query receivedGuestbookList(\n      $userId: String!\n      $page: Float\n      $pageSize: Float\n    ) {\n      receivedGuestbookList(userId: $userId, page: $page, pageSize: $pageSize) {\n        status {\n          success\n          message\n        }\n        guestbook {\n          _id\n          date\n          message\n          user {\n            firstName\n            lastName\n            username\n            verified\n            picture\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query receivedGuestbookList(\n      $userId: String!\n      $page: Float\n      $pageSize: Float\n    ) {\n      receivedGuestbookList(userId: $userId, page: $page, pageSize: $pageSize) {\n        status {\n          success\n          message\n        }\n        guestbook {\n          _id\n          date\n          message\n          user {\n            firstName\n            lastName\n            username\n            verified\n            picture\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation save($postId: String!) {\n      save(postId: $postId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation save($postId: String!) {\n      save(postId: $postId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation unSave($postId: String!) {\n      unSave(postId: $postId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation unSave($postId: String!) {\n      unSave(postId: $postId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation sendGuestbookMessage($receiverId: String!, $message: String!) {\n      sendGuestbookMessage(receiverId: $receiverId, message: $message) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation sendGuestbookMessage($receiverId: String!, $message: String!) {\n      sendGuestbookMessage(receiverId: $receiverId, message: $message) {\n        status {\n          success\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation toggleView($card: String!) {\n      toggleView(card: $card) {\n        status {\n          success\n          message\n        }\n        private\n      }\n    }\n  "): (typeof documents)["\n    mutation toggleView($card: String!) {\n      toggleView(card: $card) {\n        status {\n          success\n          message\n        }\n        private\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation upVote($postId: String!) {\n      upVote(postId: $postId) {\n        upVotesCount\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation upVote($postId: String!) {\n      upVote(postId: $postId) {\n        upVotesCount\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteEducation($id: String!) {\n      deleteEducation(id: $id) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation deleteEducation($id: String!) {\n      deleteEducation(id: $id) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation sendConnectRequest($receiverId: String!) {\n      sendConnectRequest(receiverId: $receiverId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation sendConnectRequest($receiverId: String!) {\n      sendConnectRequest(receiverId: $receiverId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeConnectRequest($connecteeId: String!) {\n      removeConnectRequest(connecteeId: $connecteeId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation removeConnectRequest($connecteeId: String!) {\n      removeConnectRequest(connecteeId: $connecteeId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query connectedList($userId: String!) {\n      connectedList(userId: $userId) {\n        status {\n          message\n          success\n        }\n        connectionList {\n          date\n          user {\n            firstName\n            lastName\n            username\n            _id\n            picture\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query connectedList($userId: String!) {\n      connectedList(userId: $userId) {\n        status {\n          message\n          success\n        }\n        connectionList {\n          date\n          user {\n            firstName\n            lastName\n            username\n            _id\n            picture\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation acceptConnectRequest($requestorId: String!) {\n      acceptConnectRequest(requestorId: $requestorId) {\n        success\n        message\n      }\n    }\n  "): (typeof documents)["\n    mutation acceptConnectRequest($requestorId: String!) {\n      acceptConnectRequest(requestorId: $requestorId) {\n        success\n        message\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchFeedV2($feedQuery: FeedQueryInput) {\n      fetchFeedV2(feedQuery: $feedQuery) {\n        data {\n          section\n          postText\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          upVoted\n          upVoteCount\n          postCommentsCount\n          type\n          saved\n          videoURL\n          event {\n            _id\n            title\n            description\n            isRegistered\n            address\n            eventDate\n            interestedUsers {\n              userId\n            }\n            images\n          }\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          date\n          _id\n          images\n          user {\n            firstName\n            lastName\n            picture\n            username\n            _id\n          }\n          elevatorInfo {\n            tags\n            ownType\n            name\n            tags\n            majors {\n              title\n            }\n            pictures\n            address {\n              streetAddressOrPOBox\n              city\n              stateAbbreviation\n              zipCode\n            }\n            name\n          }\n          studentCharges {\n            combinedChargeForRoomAndBoard\n            undergraduateApplicationFee\n            graduateApplicationFee\n            unitId\n            undergraduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              onCampus {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusNotWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              booksAndSupplies\n            }\n\n            graduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n            }\n          }\n          suggestedOrgs {\n            name\n            type\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          suggestedSpace {\n            type\n            name\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          userEvaluation {\n            unitId\n            rankings {\n              rank\n              title\n              totalPlayers\n            }\n            report {\n              academics\n              average\n              value\n              diversity\n              campus\n              atheltics\n              partyScene\n              professors\n              location\n              dorms\n              campusFood\n              studentLife\n              safety\n            }\n            reviews {\n              rating\n              type\n              votes\n            }\n          }\n\n          unitId\n          applied_level\n          status\n          attempt\n          university\n          conversation\n          major\n        }\n      }\n    }\n  "): (typeof documents)["\n    query fetchFeedV2($feedQuery: FeedQueryInput) {\n      fetchFeedV2(feedQuery: $feedQuery) {\n        data {\n          section\n          postText\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          upVoted\n          upVoteCount\n          postCommentsCount\n          type\n          saved\n          videoURL\n          event {\n            _id\n            title\n            description\n            isRegistered\n            address\n            eventDate\n            interestedUsers {\n              userId\n            }\n            images\n          }\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          date\n          _id\n          images\n          user {\n            firstName\n            lastName\n            picture\n            username\n            _id\n          }\n          elevatorInfo {\n            tags\n            ownType\n            name\n            tags\n            majors {\n              title\n            }\n            pictures\n            address {\n              streetAddressOrPOBox\n              city\n              stateAbbreviation\n              zipCode\n            }\n            name\n          }\n          studentCharges {\n            combinedChargeForRoomAndBoard\n            undergraduateApplicationFee\n            graduateApplicationFee\n            unitId\n            undergraduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              onCampus {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              offCampusNotWithFamily {\n                costOfAttendance {\n                  inDistrict\n                  inState\n                  outOfState\n                }\n                roomAndBoard\n                otherExpenses\n              }\n              booksAndSupplies\n            }\n\n            graduate {\n              inState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              outOfState {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n              inDistrict {\n                tuition\n                requiredFees\n                perCreditHourCharge\n              }\n            }\n          }\n          suggestedOrgs {\n            name\n            type\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          suggestedSpace {\n            type\n            name\n            spaces {\n              _id\n              name\n              description\n              image\n            }\n          }\n          userEvaluation {\n            unitId\n            rankings {\n              rank\n              title\n              totalPlayers\n            }\n            report {\n              academics\n              average\n              value\n              diversity\n              campus\n              atheltics\n              partyScene\n              professors\n              location\n              dorms\n              campusFood\n              studentLife\n              safety\n            }\n            reviews {\n              rating\n              type\n              votes\n            }\n          }\n\n          unitId\n          applied_level\n          status\n          attempt\n          university\n          conversation\n          major\n        }\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
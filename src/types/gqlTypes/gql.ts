/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  "\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  ":
    types.LoginDocument,
  "\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  ":
    types.AddCommentDocument,
  "\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  ":
    types.AddEducationDocument,
  "\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  ":
    types.AddPostDocument,
  "\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  ":
    types.GetPostByIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  "
): (typeof documents)["\n    mutation login(\n      $email: String\n      $password: String\n      $type: String\n      $code: Float\n      $spaceOrgName: String\n    ) {\n      login(\n        email: $email\n        password: $password\n        type: $type\n        code: $code\n        spaceOrgName: $spaceOrgName\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          accessToken\n          refreshToken\n          firstName\n          lastName\n          username\n          role\n          newUser\n          id\n          userAddedToOrg\n          spaceOrgName\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    mutation addComment(\n      $postId: String!\n      $commentText: String\n      $parentId: String\n      $replyTo: String\n    ) {\n      addComment(\n        postId: $postId\n        commentText: $commentText\n        parentId: $parentId\n        replyTo: $replyTo\n      ) {\n        status {\n          success\n          message\n        }\n        data {\n          _id\n          userId\n          postId\n          parentId\n          commentText\n          commentImage\n          date\n          repliesCount\n          upVoteCount\n          replyTo\n          upVoted\n\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    mutation addEducation(\n      $school: String!\n      $degree: String\n      $major: String\n      $startDate: String!\n      $graduationDate: String!\n    ) {\n      addEducation(\n        school: $school\n        degree: $degree\n        major: $major\n        startDate: $startDate\n        graduationDate: $graduationDate\n      ) {\n        status {\n          success\n          message\n        }\n        education {\n          private\n          schools {\n            _id\n            school\n            degree\n            major\n            startDate\n            graduationDate\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  "
): (typeof documents)["\n    mutation addPost(\n      $postText: String!\n      $unitId: Float\n      $tags: [ID]\n      $postTag: String\n      $id: String!\n      $levelOfStudy: String\n      $major: String\n      $gpa: Float\n      $testScore: TestScoreEnum\n      $testScoreMark: TestScoreMark\n      $preferredLocation: String\n      $universitySearch: String\n      $anonymityOption: Boolean\n      $relationToMajor: Boolean\n      $attendAgain: Boolean\n      $reviewSubCategories: String\n      $admissionAndApplicationRating: Int\n      $financialAidAndScholarshipRating: Int\n      $academicProgramsAndDepartmentRating: Int\n      $studentLifeAndServiceRating: Int\n      $careerAndAlumniResourceRating: Int\n    ) {\n      addPost(\n        postText: $postText\n        unitId: $unitId\n        tags: $tags\n        postTag: $postTag\n        id: $id\n        levelOfStudy: $levelOfStudy\n        major: $major\n        gpa: $gpa\n        testScore: $testScore\n        testScoreMark: $testScoreMark\n        preferredLocation: $preferredLocation\n        universitySearch: $universitySearch\n        anonymityOption: $anonymityOption\n        relationToMajor: $relationToMajor\n        attendAgain: $attendAgain\n        reviewSubCategories: $reviewSubCategories\n        admissionAndApplicationRating: $admissionAndApplicationRating\n        financialAidAndScholarshipRating: $financialAidAndScholarshipRating\n        academicProgramsAndDepartmentRating: $academicProgramsAndDepartmentRating\n        studentLifeAndServiceRating: $studentLifeAndServiceRating\n        careerAndAlumniResourceRating: $careerAndAlumniResourceRating\n      ) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          # postImage\n          date\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query getPostById($id: String!, $user: String) {\n      getPostById(id: $id, user: $user) {\n        status {\n          success\n          message\n        }\n        post {\n          _id\n          postText\n          postCommentsCount\n          admissionAndApplicationRating\n          financialAidAndScholarshipRating\n          academicProgramsAndDepartmentRating\n          studentLifeAndServiceRating\n          careerAndAlumniResourceRating\n          postType\n          postImage\n          videoURL\n          date\n          tags {\n            _id\n            name\n            parentId\n            image\n            description\n          }\n          upVoted\n          images\n          upVoteCount\n          user {\n            _id\n            firstName\n            lastName\n            username\n            picture\n          }\n          comments {\n            _id\n            commentText\n            upVoted\n            upVoteCount\n            user {\n              _id\n              firstName\n              lastName\n              picture\n              username\n            }\n          }\n        }\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;

---
// Comments.astro
export const prerender = false;
import CommentForm from './comment.form';

const { postId } = Astro.props;
const parentId = null; // Or provide a parent ID if needed

let comments = [];
let error = null;

const query = `
  query commentList($postId: String!, $parentId: String) {
    commentList(postId: $postId, parentId: $parentId) {
      status {
        success
        message
      }
      validToken
      data {
        _id
        userId
        postId
        parentId
        commentText
        commentImage
        date
        repliesCount
        upVoteCount
        replyTo
        upVoted
        user {
          _id
          firstName
          lastName
          username
          picture
        }
      }
    }
  }
`;

try {
  const response = await fetch('http://localhost:4444/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },


    body: JSON.stringify({
      query,
      variables: { postId, parentId }
    }),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  const result = await response.json();

  if (result.errors) {
    throw new Error(result.errors[0].message);
  }

  comments = result.data.commentList.data;
} catch (e) {
  console.error("Error fetching comments:", e);
  error = e instanceof Error ? e.message : String(e);
}



---

<section class='bg-white dark:bg-black-900 py-8 lg:py-6 antialiased'>
  <div class='max-w-4xl mx-auto px-4'>
    <div class='flex justify-between items-center mb-6'>
      <h2 class='text-lg sm:text-xl lg:text-2xl font-bold text-gray-900 dark:text-white'>
        Discussion ({comments.length})
      </h2>
    </div>
    <CommentForm 
        postId={postId}
        client:visible
        onCommentAdded={(newComment) => {
          
          // You might want to update the comments list here
        }} 
    />
    {error && <p class="text-red-500">{error}</p>}
    {comments.map((comment: { user: { picture: any; firstName: unknown; lastName: unknown; }; date: string | number | Date | null | undefined; _id: any; }) => (
      <article class='p-6 mb-3 text-base bg-white rounded-lg border border-gray-200 dark:bg-gray-900 dark:border-gray-700 w-full'>
        <footer class='flex justify-between items-center mb-2'>
          <div class='flex items-center'>
            <p class='inline-flex items-center mr-3 text-sm text-gray-900 dark:text-white font-semibold'>
              <img
                class='mr-2 w-6 h-6 rounded-full'
                src={comment.user.picture || 'https://via.placeholder.com/40'}
                alt={comment.user.firstName as string}
              />
              {comment.user.firstName} {comment.user.lastName}
            </p>
            <p class='text-sm text-gray-600 dark:text-gray-400'>
              
            </p>
          </div>
          <button
            id={`dropdownComment${comment._id}`}
            data-dropdown-toggle={`dropdownMenu${comment._id}`}
            class='inline-flex items-center p-2 text-sm font-medium text-center text-gray-500 dark:text-gray-400 bg-white rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-50 dark:bg-gray-900 dark:hover:bg-gray-700 dark:focus:ring-gray-600'
            type='button'
          >
            <svg
              class='w-4 h-4'
              aria-hidden='true'
              xmlns='http://www.w3.org/2000/svg'
              fill='currentColor'
              viewBox='0 0 16 3'
            >
              <path d='M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z' />
            </svg>
            <span class='sr-only'>Comment settings</span>
          </button>
          <div
            id={`dropdownMenu${comment._id}`}
            class='hidden z-10 w-36 bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700 dark:divide-gray-600'
          >
            <ul
              class='py-1 text-sm text-gray-700 dark:text-gray-200'
              aria-labelledby='dropdownMenuIconHorizontalButton'
            >
              <li>
                <a
                  href='#'
                  class='block py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white'
                >
                  Edit
                </a>
              </li>
              <li>
                <a
                  href='#'
                  class='block py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white'
                >
                  Remove
                </a>
              </li>
              <li>
                <a
                  href='#'
                  class='block py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white'
                >
                  Report
                </a>
              </li>
            </ul>
          </div>
        </footer>
        <div
          class='text-gray-500 dark:text-gray-400'
          set:html={comments.commentText}
        />
        <div class='flex items-center mt-4 space-x-4'>
          <button
            type='button'
            class='flex items-center text-sm text-gray-500 hover:underline dark:text-gray-400 font-medium'
          >
            <svg
              class='mr-1.5 w-3.5 h-3.5'
              aria-hidden='true'
              xmlns='http://www.w3.org/2000/svg'
              fill='none'
              viewBox='0 0 20 18'
            >
              <path
                stroke='currentColor'
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z'
              />
            </svg>
            Reply
          </button>
        </div>
      </article>
    ))}
  </div>
</section>
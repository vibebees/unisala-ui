---
export const prerender = false;
import { lazy } from 'react';
import MainLayout from '@/layouts/main-layout.astro';
import ThreadSkeleton from '@/components/layout/skeleton/thread.astro';
import SingleThread from '@/components/packages/thread/singleThread/index';
import Comments from '@/components/thread/comments/index.tsx';
import ThreadHeader from '@/components/layout/thread-header.astro';
import linkifyHtml from 'linkify-html';
const ThreadActionTsx = lazy(() => import('@/components/thread/actions/upvote'));
import { fetchApi } from '@/utils/api.utility';
const { slug ="" } = Astro.params;
import {userServiceGql} from '@/datasource/servers/index';
import {Toast} from '@/components/ui/toast';
import { FourOhFour } from '@/components/ui/404';
import { ThreadAuthor } from '@/components/thread/organisms/thread.author';
import { stripHtmlTagsServerSide } from '@/utils/lib/utils';
import ThreadSuggestions from '@/components/thread/organisms/thread.suggestion.astro'

let post = null;
let error: string = '';
// Remove the assignment to prerender
const query = `
  query getPostById($id: String!, $user: String) {
    getPostById(id: $id, user: $user) {
      status {
        success
        message
      }
      post {
       title
        _id
        postText
        postCommentsCount
        admissionAndApplicationRating
        financialAidAndScholarshipRating
        academicProgramsAndDepartmentRating
        studentLifeAndServiceRating
        careerAndAlumniResourceRating
        postType
        postImage
        videoURL
        date
        tags {
          _id
          name
          parentId
          image
          description
        }
        postTags {
          tagType
          tag {
            _id
            name
          }
        }
        upVoted
        images
        upVoteCount
        user {
          _id
          username
          firstName
          lastName
          picture
        }
        comments {
          _id
          commentText
          upVoted
          upVoteCount
          user {
            _id
            firstName
            lastName
            picture
            username
          }
        }
          
      }
    }
  }
`;

try {
  const result = await fetchApi(userServiceGql, {
    method: 'POST',
    body: JSON.stringify({
      query,
      variables: { id: slug, user: null },
    }),
  });

  if (result.errors) {
    throw new Error(result.errors[0].message);
  }

  post = result.data?.getPostById?.post;

  if (!post) {
    throw new Error('Post not found');
  }
} catch (e) {
  console.error("Error fetching post:", e);
  error = e instanceof Error ? e.message : String(e);
}

function extractHeading(text: string) {
  const headingMatch = text.match(/<h\d[^>]*>(.*?)<\/h\d>/i);
  if (headingMatch) return headingMatch[1].trim();

  let cleanText = text
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

  cleanText = cleanText
    .replace(/(\d{4})([A-Z])/g, '$1\n$2')
    .replace(/([.:])(\d+)/g, '$1\n$2')
    .replace(/([a-z])([A-Z])/g, '$1\n$2');

  const lines = cleanText.split('\n');
  let heading = lines.slice(0, 2).join(' - ');

  if (heading.length > 150) {
    heading = heading.slice(0, 147) + '...';
  }

  return heading || 'Thread Details';
}

const heading = post ? extractHeading(post?.postText) : 'Loading...';
const title = post && post?.title?.length > 0 ? post?.title : heading;
const articleTitle = stripHtmlTagsServerSide(linkifyHtml(title))
---

<MainLayout title={articleTitle}>
<Toast client:load />
{error && <FourOhFour message={error} />}
  
  {!post && !error && <ThreadSkeleton />}
  {post && (
    <section class='container max-w-screen-lg space-y-6 pt-12'>
      <ThreadHeader heading={articleTitle} username={post?.user?.username}  firstName={post?.user?.firstName}  lastName={post?.user?.lastName}  date={post?.date} claps={post?.upVoteCount} comments={post?.postCommentsCount} />
       <ul class='pt-6'>
        <li class='flex flex-col max-md:gap-y-4 md:flex-row w-full'>
          <div class='md:basis-32 lg:basis-56 shrink-0 grow-0'>
            {/* User info can be added here nif needed */}
          </div>

          <div class='prose dark:prose-invert prose-img:rounded-3xl max-w-none w-full pb-24'>
            <SingleThread
            post = {post}
            />
          </div>
        </li>
       
        <ThreadActionTsx
          heading={heading}
          username={post?.user?.username}
          date={post?.date}
          comments={post?.postCommentsCount}
          postId={slug}
          initialClaps={post?.upVoteCount}
          client:only 'react'
          upVoted={post?.upVoted}
        />
          
      </ul>
    </section>
  )}
  
  <!-- //pass postId from slug -->
  <Comments client:only ='react'  postId = {slug}/>
  <ThreadAuthor
      author ={post?.user?.firstName + ' ' + post?.user?.lastName}
      authorDescription=''
  />
  <ThreadSuggestions  feedId ={post?.postTags?.tag?._id}  />
</MainLayout>
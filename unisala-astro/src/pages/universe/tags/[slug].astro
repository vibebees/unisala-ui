---
export const prerender = false;

import MainLayout from '@/layouts/main-layout.astro';
import MediumFeed from '@/components/feed/tagsfeed.tsx';

import { fetchApi } from '@/utils/api.utility';
import { userServiceGql } from '@/datasource/servers';
const { slug = '' } = Astro.params;

const getNewsFeed = `
    query fetchFeedV2($feedQuery: FeedQueryInput) {
      fetchFeedV2(feedQuery: $feedQuery) {
        validToken
        data {
          section
          postText
          upVoted
          upVoteCount
          postCommentsCount
          type
          date
          _id
          title
          images
          user {
            firstName
            lastName
            picture
            username
            _id
          }
        }
      }
    }
`;

const GetTopActiveSpaces = `
    query getTopActiveSpaces($limit: Int) {
      getTopActiveSpaces(limit: $limit) {
        status {
          success
          message
        }
        spaceCategory {
          _id
          name
        }
      }
    }
`;

let articles = [];
let staffPicks = [];
let topics = [];
let error = '';
let tagName = 'Space';
let id = '';
try {
  const extractNameAndId = (url: string) => {
    // Match the ID at the end of the url (assuming it's a 24-character hexadecimal string)
    const match = url.match(/^(.+)-([a-f0-9]{24})$/);

    if (!match) {
      throw new Error('Invalid url format: expected name-[24 character ID]');
    }

    // Extract the name and ID
    let [, name, id] = match;

    // Replace hyphens with spaces in the name
    name = name.replace(/-/g, ' ');

    // Capitalize the first letter of each word in the name
    const capitalizedName = name.replace(/\b\w/g, (char) => char.toUpperCase());

    return { name: capitalizedName, id };
  };
  const { name: tag, id: tagId } = extractNameAndId(slug);

  // Fetch regular articles
  const regularFeed = await fetchApi(userServiceGql, {
    method: 'POST',
    body: JSON.stringify({
      query: getNewsFeed,
      variables: {
        feedQuery: {
          feedType: 'specificSpace',
          feedId: tagId,
          pageSize: 25
        }
      }
    })
  });

  // Fetch staff picks
  const staffPicksResult = await fetchApi(userServiceGql, {
    method: 'POST',
    body: JSON.stringify({
      query: getNewsFeed,
      variables: {
        feedQuery: {
          feedType: 'org',
          page: 0,
          pageSize: 6
        }
      }
    })
  });

  // Fetch top active spaces for topics
  const topicsResult = await fetchApi(userServiceGql, {
    method: 'POST',
    body: JSON.stringify({
      query: GetTopActiveSpaces,
      variables: {
        limit: 9
      }
    })
  });

  if (regularFeed.errors || staffPicksResult.errors || topicsResult.errors) {
    throw new Error('Error fetching data');
  }

  articles = regularFeed.data?.fetchFeedV2?.data || [];
  staffPicks = staffPicksResult.data?.fetchFeedV2?.data || [];
  topics = topicsResult.data?.getTopActiveSpaces?.spaceCategory || [];
  tagName = tag;
  id = tagId;
} catch (e) {
  console.error('Error fetching data:', e);
  error = e instanceof Error ? e.message : String(e);
}
const images = [
  'https://i.ibb.co/Rz2S3kg/Screenshot-2024-08-23-at-3-46-20-PM.png',
  'https://i.ibb.co/cNBfq71/Screenshot-2024-08-23-at-3-46-28-PM.png',
  'https://i.ibb.co/3pSYmTj/Screenshot-2024-08-23-at-3-46-35-PM.png',
  'https://i.ibb.co/nD4cbmV/Screenshot-2024-08-23-at-3-46-45-PM.png',
  'https://i.ibb.co/HKmKqFn/Screenshot-2024-08-23-at-3-46-54-PM.png',
  'https://i.ibb.co/vXFT8Jt/Screenshot-2024-08-23-at-3-47-10-PM.png',
  'https://i.ibb.co/wSv5VWJ/Screenshot-2024-08-23-at-3-47-03-PM.png',
  'https://i.ibb.co/5cYkYK7/Screenshot-2024-08-23-at-3-47-18-PM.png',
  'https://i.ibb.co/8Ptrjc3/Screenshot-2024-08-23-at-3-47-24-PM.png',
  'https://i.ibb.co/S0ZJKSx/Screenshot-2024-08-23-at-3-47-30-PM.png',
  'https://i.ibb.co/4g6YvD5/Screenshot-2024-08-23-at-3-47-38-PM.png'
];
---

<MainLayout title={tagName}>
  {error && <div>Error: {error}</div>}
  {
    !error && (
      <section class="container  max-w-screen-lg pt-12">
        <MediumFeed
          articles={articles}
          staffPicks={staffPicks}
          topics={topics}
          title={tagName}
          id={id}
          showStaffPicks={true}
          showTopics={true}
          showImage={true}
          images={images}
        />
      </section>
    )
  }
</MainLayout>

---
export const prerender = false;

import MainLayout from "@/layouts/main-layout.astro";
import { ArticleCard } from "@/components/feed/articlecard";
import { StaffPick, TopicBadge, CoverImage, NoArticleCard } from "@/components/feed/newtagsfeed";
import { fetchApi } from "@/utils/api.utility";
import { userServiceGql } from "@/datasource/servers";
import type { IPost } from "@/types/post";
const { slug = "" } = Astro.params;
// import Subscription from "@/components/newsletter/subscription";
const getNewsFeed = `
    query fetchFeedV2($feedQuery: FeedQueryInput) {
      fetchFeedV2(feedQuery: $feedQuery) {
        validToken
        data {
          section
          postText
          upVoted
          upVoteCount
          postCommentsCount
          type
          date
          _id
          title
          images
          user {
            firstName
            lastName
            picture
            username
            _id
          }
        }
      }
    }
`;

const GetTopActiveSpaces = `
    query getTopActiveSpaces($limit: Int) {
      getTopActiveSpaces(limit: $limit) {
        status {
          success
          message
        }
        spaceCategory {
          _id
          name
        }
      }
    }
`;

let articles = [];
let staffPicks = [];
let topics = [];
let error = "";
let tagName = "Space";
let id = "";
let showStaffPicks = true;
let showTopics = true;
let showImage = true;

try {
  const extractNameAndId = (url: string) => {
    const match = url.match(/^(.+)-([a-f0-9]{24})$/);
    if (!match) {
      throw new Error("Invalid url format: expected name-[24 character ID]");
    }
    let [, name, id] = match;
    name = name.replace(/-/g, " ");
    const capitalizedName = name.replace(/\b\w/g, (char) => char.toUpperCase());
    return { name: capitalizedName, id };
  };
  
  const { name: tag, id: tagId } = extractNameAndId(slug);

  // Fetch regular articles
  const regularFeed = await fetchApi(userServiceGql, {
    method: "POST",
    body: JSON.stringify({
      query: getNewsFeed,
      variables: {
        feedQuery: {
          feedType: "specificSpace",
          feedId: tagId,
          pageSize: 25,
        },
      },
    }),
  });

  // Fetch staff picks
  const staffPicksResult = await fetchApi(userServiceGql, {
    method: "POST",
    body: JSON.stringify({
      query: getNewsFeed,
      variables: {
        feedQuery: {
          feedType: "org",
          page: 0,
          pageSize: 6,
        },
      },
    }),
  });

  // Fetch top active spaces for topics
  const topicsResult = await fetchApi(userServiceGql, {
    method: "POST",
    body: JSON.stringify({
      query: GetTopActiveSpaces,
      variables: {
        limit: 9,
      },
    }),
  });

  if (regularFeed.errors || staffPicksResult.errors || topicsResult.errors) {
    throw new Error("Error fetching data");
  }

  articles = regularFeed.data?.fetchFeedV2?.data || [];
  staffPicks = staffPicksResult.data?.fetchFeedV2?.data || [];
  topics = topicsResult.data?.getTopActiveSpaces?.spaceCategory || [];
  tagName = tag;
  id = tagId;
} catch (e) {
  console.error("Error fetching data:", e);
  error = e instanceof Error ? e.message : String(e);
}

const images = [
  "https://i.ibb.co/Rz2S3kg/Screenshot-2024-08-23-at-3-46-20-PM.png",
  "https://i.ibb.co/cNBfq71/Screenshot-2024-08-23-at-3-46-28-PM.png",
  "https://i.ibb.co/3pSYmTj/Screenshot-2024-08-23-at-3-46-35-PM.png",
  "https://i.ibb.co/nD4cbmV/Screenshot-2024-08-23-at-3-46-45-PM.png",
  "https://i.ibb.co/HKmKqFn/Screenshot-2024-08-23-at-3-46-54-PM.png",
  "https://i.ibb.co/vXFT8Jt/Screenshot-2024-08-23-at-3-47-10-PM.png",
  "https://i.ibb.co/wSv5VWJ/Screenshot-2024-08-23-at-3-47-03-PM.png",
  "https://i.ibb.co/5cYkYK7/Screenshot-2024-08-23-at-3-47-18-PM.png",
  "https://i.ibb.co/8Ptrjc3/Screenshot-2024-08-23-at-3-47-24-PM.png",
  "https://i.ibb.co/S0ZJKSx/Screenshot-2024-08-23-at-3-47-30-PM.png",
  "https://i.ibb.co/4g6YvD5/Screenshot-2024-08-23-at-3-47-38-PM.png",
];

const randomImage = images[Math.floor(Math.random() * images.length)];
---

<MainLayout title={tagName}>
  {error && <div>Error: {error}</div>}
  {
    !error && (
      <section class="container max-w-screen-lg pt-12">
        <div class="max-w-screen-xl mx-auto px-4 py-8">
          <h1 class="font-signature text-center italic text-xl lg:text-3xl text-black dark:text-white tracking-wide border-b-2 border-indigo-300 dark:border-gray-600 pb-2 mb-4 shadow-sm">
            #{tagName}
          </h1>

          <div class="flex flex-col md:flex-row">
            <div class={`w-full ${showStaffPicks || showTopics ? 'lg:w-3/4 lg:pr-8' : ''}`}>
              {articles.length === 0 ? (
                <NoArticleCard client:load title={tagName} id={id} />
              ) : (
                <>
                  <CoverImage
                    client:only
                    articles={articles}
                    showImage={showImage}
                    randomImage={randomImage}
                    title={tagName}
                    spaceId = {id}
                  />

                  {articles.map((article: IPost) => (
                    <ArticleCard client:load article={article} />
                  ))}
                </>
              )}
            </div>

            {(showStaffPicks || showTopics) && (
              <div class="md:w-1/4">
                {showStaffPicks && staffPicks.length > 0 && (
                  <div class="mb-8">
                    <h2 class="text-lg font-bold mb-4">Staff Picks</h2>
                    {staffPicks.map((pick: IPost) => (
                      <StaffPick client:load article={pick} />
                    ))}
                  </div>
                )}

                {showTopics && topics.length > 0 && (
                  <div>
                    <h2 class="text-lg font-bold mb-4">Recommended topics</h2>
                    <div class="flex flex-wrap">
                      {topics.map((topic: { name: string; _id: string; }) => (
                        <TopicBadge 
                          client:load 
                          topic={topic.name} 
                          id={topic._id} 
                        />
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        {/* <Subscription
          client:load
          title="Subscribe to our newsletter"
          /> */}
      </section>
    )
  }
</MainLayout>